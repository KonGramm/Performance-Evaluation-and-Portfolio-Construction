}
}
}
# Realized return of min-variance portfolio
RR_minvar_sim_outofsample <- Ret_outofsample %*% w_minvar_sim
mean(RR_minvar_sim_outofsample)
#calculate Portfolio Risk (portfolio standard deviation)
PR_minvar_sim_outofsample <- sqrt(t(w_minvar_sim) %*% cov_mat_sim_outofsample %*% w_minvar_sim)
# Contidional Sharpe Ratio
CSR_minvar_sim_outofsample <- mean(RR_minvar_sim_outofsample) / PR_minvar_sim_outofsample
round(cbind(PortReturn_minvar_sim, PortRisk_minvar_sim,
mean(RR_minvar_sim_outofsample), PR_minvar_sim_outofsample,
CSR_minvar_sim_outofsample), 4)
#==========================================================================
# PLOT CUMULATIVE RETURNS
#==========================================================================
Cum_Ret_sim_meanvar <- cumsum(RR_meanvar_sim_outofsample)
Cum_Ret_sim_minvar <- cumsum(RR_minvar_sim_outofsample)
# Cumulative Portfolio Returns
plot(dates, Cum_Ret_sim_meanvar, type="l", col="blue", lwd=3, xlab="Time", ylab="Cumulative Return",
main="", cex.axis=1.5, cex.lab=1.5, cex.main=1.5, ylim=c(-0.2, 0.6))
lines(dates, Cum_Ret_sim_minvar, type="l", col="red", lwd=3)
legend("topleft", legend=c("Mean-Variance Portfolio", "Minimum Variance Portfolio"),
col=c("blue", "red"), lty=1, lwd=3, cex=1.5, inset=c(0.01, 0.01))
# Customize the x-axis to show the actual dates by year without duplication
axis.Date(1, at = seq(as.Date("2016-01-01"), as.Date("2019-07-01"), by = "years"), format = "%Y", cex.axis = 1.5)
# Evaluate the constructed portfolios based on (i) the realized returns, (ii) the cumulative
# returns, and (iii) the Conditional Sharpe Ratio, for the out-of-sample period 8/2015-7/2019.
# Evaluate the portfolios
sim_evaluations <- list(
MeanVariance = list(
PortReturn = round(PortReturn_meanvar_sim, 4),
PortRisk = round(PortRisk_meanvar_sim, 4),
RealizedReturn = round(mean(RR_meanvar_sim_outofsample), 4),
ConditionalSharpeRatio = round(CSR_meanvar_sim_outofsample, 4)
),
MinVariance = list(
PortReturn = round(PortReturn_minvar_sim, 4),
PortRisk = round(PortRisk_minvar_sim, 4),
RealizedReturn = round(mean(RR_minvar_sim_outofsample), 4),
ConditionalSharpeRatio = round(CSR_minvar_sim_outofsample, 4)
)
)
print(sim_evaluations)
#------------------------------------ c. ---------------------------------------------------------
# The mean vector and the covariance matrix of returns are estimated
# Based on multivariate multiple regression models
factorsRet <- timeSeries(factors, Time)
Fact=factorsRet[1:insample,]
dim(Fact)
dim(factorsRet)
head(factorsRet)
T <- nrow(Data)  # total number of time periods
k <- ncol(Data)  # number o f funds
Fact_outofsample <- factorsRet[(insample + 1):T,]
dim(Fact_outofsample)
#==========================================================================================
# CONSTRUCTION OF MEAN-VARIANCE PORTFOLIOS BASED ON MULTIVARIATE MULTIPLE REGRESSION MODELS
#==========================================================================================
# Prepare the data
Y <- as.matrix(Ret)
X <- as.matrix(Fact)
# Initialize matrices and vectors
alphas <- numeric(k)
betas <- matrix(NA, nrow = k, ncol = ncol(X))
residual_vars <- matrix(0, nrow = k, ncol = k)
residuals_list <- list()
# Loop through each fund to fit the regression model
for (i in 1:k) {
y <- Y[, i]
data <- data.frame(y, X)
data <- na.omit(data)
# Regress only if there are enough data points
if (nrow(data) > 1) {
model <- lm(y ~ ., data = data)
coefs <- coef(model)
alphas[i] <- coefs[1]
betas[i, ] <- coefs[-1]
# Calculate residual variance
residuals <- residuals(model)
residual_vars[i, i] <- var(residuals)
residuals_list[[i]] <- residuals
}
}
# Convert alphas to column matrix
alphas <- matrix(alphas, ncol = 1)
dim(alphas)
dim(betas)
# Calculate mean returns of factors
mean_factors_return <- colMeans(X, na.rm = TRUE)
mean_factors_return <- matrix(mean_factors_return, ncol = 1)
# Estimate mean returns of funds
m_vec_multivar <- alphas + betas %*% mean_factors_return
print(dim(m_vec_multivar))
max(m_vec_multivar)
# Estimate covariance matrix using the multivariate regression model
factor_cov <- cov(X, use = "complete.obs")
cov_mat_multivar <- residual_vars + betas %*% factor_cov %*% t(betas)
dim(cov_mat_multivar)
# Check for positive definiteness
eigen_values <- eigen(cov_mat_multivar)$values
if (any(eigen_values <= 0)) {
stop("Covariance matrix is not positive definite even after regularization!")
}
targetreturn <- 0.01
# Construct Mean-Variance Portfolio
D.mat <- 2 * cov_mat_multivar
d.vec <- rep(0, k)
A.mat <- cbind(rep(1, k), m_vec_multivar, diag(k))
b.vec <- c(1, targetreturn, rep(0, k))
# Solve the Quadratic Programming Problem
qp.Result_multivar_meanvar <- solve.QP(Dmat = D.mat, dvec = d.vec, Amat = A.mat, bvec = b.vec, meq = 1)
# Extract optimal weights
w_meanvar_multivar <- round(qp.Result_multivar_meanvar$solution, 5)
cbind((1:ncol(Y)), w_meanvar_multivar)
# Calculate in-sample performance
PortReturn_meanvar_multivar <- sum(m_vec_multivar * w_meanvar_multivar)
PortRisk_meanvar_multivar <- sqrt(t(w_meanvar_multivar) %*% cov_mat_multivar %*% w_meanvar_multivar)
print(round(cbind(PortReturn_meanvar_multivar, PortRisk_meanvar_multivar), 4))
#--------------------------- OUT OF SAMPLE -----------------------------------------------------
# Calculate out-of-sample performance
X_outofsample <- as.matrix(Fact_outofsample)
Y_outofsample <- as.matrix(Ret_outofsample)
# Calculate mean returns of factors out-of-sample
mean_factors_return_outofsample <- colMeans(X_outofsample, na.rm = TRUE)
mean_factors_return_outofsample <- matrix(mean_factors_return_outofsample, ncol = 1)
# Estimate mean returns of funds out-of-sample
m_vec_multivar_outofsample <- alphas + betas %*% mean_factors_return_outofsample
# Realized return of mean-variance portfolio out-of-sample
RR_meanvar_multivar_outofsample <- Y_outofsample %*% w_meanvar_multivar
mean(RR_meanvar_multivar_outofsample)
# Calculate portfolio risk (standard deviation) out-of-sample
cov_mat_multivar_outofsample <- residual_vars + betas %*% cov(X_outofsample) %*% t(betas)
PR_meanvar_multivar_outofsample <- sqrt(t(w_meanvar_multivar) %*% cov_mat_multivar_outofsample %*% w_meanvar_multivar)
# Conditional Sharpe Ratio out-of-sample
CSR_meanvar_multivar_outofsample <- mean(RR_meanvar_multivar_outofsample) / PR_meanvar_multivar_outofsample
# Calculate cumulative returns
Cum_Ret_multivar_meanvar <- cumsum(RR_meanvar_multivar_outofsample)
#==========================================================================================
# CONSTRUCTION OF MIN-VARIANCE PORTFOLIOS BASED ON MULTIVARIATE MULTIPLE REGRESSION MODELS
#==========================================================================================
# Initialize matrices and vectors
# Calculate mean returns of factors
mean_factors_return <- colMeans(X, na.rm = TRUE)
mean_factors_return <- matrix(mean_factors_return, ncol = 1)
# Estimate mean returns of funds
m_vec_multivar <- alphas + betas %*% mean_factors_return
print(dim(m_vec_multivar))
print(max(m_vec_multivar))
# Estimate covariance matrix using the multivariate regression model
factor_cov <- cov(X, use = "complete.obs")
cov_mat_multivar <- residual_vars + betas %*% factor_cov %*% t(betas)
print(dim(cov_mat_multivar))
# Check for positive definiteness
eigen_values <- eigen(cov_mat_multivar)$values
if (any(eigen_values <= 0)) {
stop("Covariance matrix is not positive definite even after regularization!")
}
# Construct Minimum Variance Portfolio
D.mat <- 2 * cov_mat_multivar
d.vec <- rep(0, k)
A.mat <- cbind(rep(1, k), diag(k))
b.vec <- c(1, rep(0, k))
# Solve the Quadratic Programming Problem
qp.Result_multivar_minvar <- solve.QP(Dmat = D.mat, dvec = d.vec, Amat = A.mat, bvec = b.vec, meq = 1)
# Extract optimal weights
w_minvar_multivar <- round(qp.Result_multivar_minvar$solution, 5)
# Print weights
print(cbind((1:ncol(Y)), w_minvar_multivar))
# Calculate in-sample performance
PortReturn_minvar_multivar <- sum(m_vec_multivar * w_minvar_multivar)
PortRisk_minvar_multivar <- sqrt(t(w_minvar_multivar) %*% cov_mat_multivar %*% w_minvar_multivar)
print(round(cbind(PortReturn_minvar_multivar, PortRisk_minvar_multivar), 4))
#------------------------------------ OUT OF SAMPLE -----------------------------------------------
# Realized return of minimum-variance portfolio out-of-sample
RR_minvar_multivar_outofsample <- Y_outofsample %*% w_minvar_multivar
mean(RR_minvar_multivar_outofsample)
# Calculate portfolio risk (standard deviation) out-of-sample
cov_mat_multivar_outofsample <- residual_vars + betas %*% cov(X_outofsample) %*% t(betas)
PR_minvar_multivar_outofsample <- sqrt(t(w_minvar_multivar) %*% cov_mat_multivar_outofsample %*% w_minvar_multivar)
# Conditional Sharpe Ratio out-of-sample
CSR_minvar_multivar_outofsample <- mean(RR_minvar_multivar_outofsample) / PR_minvar_multivar_outofsample
# Calculate cumulative returns
Cum_Ret_multivar_minvar <- cumsum(RR_minvar_multivar_outofsample)
#==========================================================================
# PLOT CUMULATIVE RETURNS
#==========================================================================
# Cumulative Portfolio Returns
plot(dates, Cum_Ret_multivar_meanvar, type="l", col="blue", lwd=3, xlab="Time", ylab="Cumulative Return",
main="", cex.axis=1.5, cex.lab=1.5, cex.main=1.5, ylim=c(-0.2, 0.6))
lines(dates, Cum_Ret_multivar_minvar, type="l", col="red", lwd=3)
legend("topleft", legend=c("Mean-Variance Portfolio", "Minimum Variance Portfolio"),
col=c("blue", "red"), lty=1, lwd=3, cex=1.5, inset=c(0.01, 0.01))
# Customize the x-axis to show the actual dates by year without duplication
axis.Date(1, at = seq(as.Date("2016-01-01"), as.Date("2019-07-01"), by = "years"), format = "%Y", cex.axis = 1.5)
#------------------------------------ d. ---------------------------------------------------------
#----------- CONSTANT CONDITIONAL CORRELATION (CCC) MODEL FOR THE VARIANVE COVARIANCE MATRIX -----------------
# in order to do this we need to modify the covariance matrix Î£t to incorporate the structure
# Î£t= Dt * R * Dt
#==============================================================================================
# CONSTRUCTION OF MEAN-VARIANCE PORTFOLIOS BASED ON CONSTANT CONDITIONAL CORRELATION (CCC) MODEL
# FOR THE VARIANVE COVARIANCE MATRIX
#=============================================================================================
# Construct the diagonal matrix Dt
# The diagonal matrix Dt is constructed using the square root of the diagonal elements of cov_mat_multivar
Dt <- diag(sqrt(diag(cov_mat_multivar)))
dim(Dt)
# Estimate the constant correlation matrix R
residual_matrix <- do.call(cbind, residuals_list)
R <- cor(residual_matrix, use = "complete.obs")
dim(R)
# Construct the new covariance matrix Sigma_t
cov_mat_CCC <- Dt %*% R %*% Dt
dim(cov_mat_CCC)
max(m_vec_multivar)
# Solve the optimization problem for the Mean-Variance Portfolio
targetreturn <- 0.01  # or your chosen target return
D.mat <- 2 * cov_mat_CCC
d.vec <- rep(0, k)
A.mat <- cbind(rep(1, k), m_vec_multivar, diag(k))
b.vec <- c(1, targetreturn, rep(0, k))
# Solve the Quadratic Programming Problem
qp.Result_meanvar <- solve.QP(Dmat = D.mat, dvec = d.vec, Amat = A.mat, bvec = b.vec, meq = 1)
# Extract optimal weights
w_meanvar <- round(qp.Result_meanvar$solution, 5)
# Calculate in-sample performance
PortReturn_ccc_meanvar <- sum(m_vec_multivar * w_meanvar)
PortRisk_ccc_meanvar <- sqrt(t(w_meanvar) %*% cov_mat_CCC %*% w_meanvar)
print(round(cbind(PortReturn_ccc_meanvar, PortRisk_ccc_meanvar), 4))
#==============================================================================================
# CONSTRUCTION OF MIN-VARIANCE PORTFOLIOS BASED ON CONSTANT CONDITIONAL CORRELATION (CCC) MODEL
# FOR THE VARIANVE COVARIANCE MATRIX
#=============================================================================================
# Construct the diagonal matrix Dt
#diagonal matrix Dt is constructed using the square root of the residual variances directly.
# Solve the optimization problem for the Minimum Variance Portfolio
D.mat <- 2 * cov_mat_CCC
d.vec <- rep(0, k)
A.mat <- cbind(rep(1, k), diag(k))
b.vec <- c(1, rep(0, k))
# Solve the Quadratic Programming Problem
qp.Result_minvar <- solve.QP(Dmat = D.mat, dvec = d.vec, Amat = A.mat, bvec = b.vec, meq = 1)
# Extract optimal weights
# the proportion of the portfolio invested in each fund
w_minvar <- round(qp.Result_minvar$solution, 5)
# Calculate in-sample performance
PortReturn_ccc_minvar <- sum(m_vec_multivar * w_minvar)
PortRisk_ccc_minvar <- sqrt(t(w_minvar) %*% cov_mat_CCC %*% w_minvar)
print(round(cbind(PortReturn_ccc_minvar, PortRisk_ccc_minvar), 4))
#==============================================================================================
# OUT-OF-SAMPLE PERFORMANCE EVALUATION
#==============================================================================================
# Calculate mean returns of factors out-of-sample
mean_factors_return_outofsample <- colMeans(X_outofsample, na.rm = TRUE)
mean_factors_return_outofsample <- matrix(mean_factors_return_outofsample, ncol = 1)
# Estimate mean returns of funds out-of-sample
m_vec_multivar_outofsample <- alphas + betas %*% mean_factors_return_outofsample
# Realized return of mean-variance portfolio out-of-sample
RR_ccc_meanvar_outofsample <- Y_outofsample %*% w_meanvar
mean(RR_ccc_meanvar_outofsample)
# Calculate portfolio risk (standard deviation) out-of-sample
cov_mat_CCC_outofsample <- Dt %*% R %*% Dt
PR_ccc_meanvar_outofsample <- sqrt(t(w_meanvar) %*% cov_mat_CCC_outofsample %*% w_meanvar)
# Conditional Sharpe Ratio out-of-sample
CSR_ccc_meanvar_outofsample <- mean(RR_ccc_meanvar_outofsample) / PR_ccc_meanvar_outofsample
# Realized return of minimum-variance portfolio out-of-sample
RR_ccc_minvar_outofsample <- Y_outofsample %*% w_minvar
mean(RR_ccc_minvar_outofsample)
# Calculate portfolio risk (standard deviation) out-of-sample
PR_ccc_minvar_outofsample <- sqrt(t(w_minvar) %*% cov_mat_CCC_outofsample %*% w_minvar)
# Conditional Sharpe Ratio out-of-sample
CSR_ccc_minvar_outofsample <- mean(RR_ccc_minvar_outofsample) / PR_ccc_minvar_outofsample
# Calculate cumulative returns
Cum_Ret_ccc_meanvar <- cumsum(RR_ccc_meanvar_outofsample)
Cum_Ret_ccc_minvar <- cumsum(RR_ccc_minvar_outofsample)
# Evaluate the portfolios
evaluations_CCC <- list(
MeanVariance = list(
PortReturn = round(PortReturn_meanvar, 4),
PortRisk = round(PortRisk_meanvar, 4),
RealizedReturn = round(mean(RR_ccc_meanvar_outofsample), 4),
ConditionalSharpeRatio = round(CSR_ccc_meanvar_outofsample, 4),
CumulativeReturn = round(Cum_Ret_ccc_meanvar[length(Cum_Ret_ccc_meanvar)], 4)
),
MinVariance = list(
PortReturn = round(PortReturn_minvar, 4),
PortRisk = round(PortRisk_minvar, 4),
RealizedReturn = round(mean(RR_ccc_minvar_outofsample), 4),
ConditionalSharpeRatio = round(CSR_ccc_minvar_outofsample, 4),
CumulativeReturn = round(Cum_Ret_ccc_minvar[length(Cum_Ret_ccc_minvar)], 4)
)
)
print(evaluations_CCC)
# Cumulative Portfolio Returns
plot(dates, Cum_Ret_ccc_meanvar, type="l", col="blue", lwd=3, xlab="Time", ylab="Cumulative Return",
main="", cex.axis=1.5, cex.lab=1.5, cex.main=1.5, ylim=c(-0.2, 0.6))
lines(dates, Cum_Ret_ccc_minvar, type="l", col="red", lwd=3)
legend("topleft", legend=c("Mean-Variance Portfolio", "Minimum Variance Portfolio"),
col=c("blue", "red"), lty=1, lwd=3, cex=1.5, inset=c(0.01, 0.01))
# Customize the x-axis to show the actual dates by year without duplication
axis.Date(1, at = seq(as.Date("2016-01-01"), as.Date("2019-07-01"), by = "years"), format = "%Y", cex.axis = 1.5)
#----------------------------------------- e.----------------------------------------------------
#------------ Fitting a Fama-French Three-Factor Model ------------------------------------------------------
#==============================================================================================
# CONSTRUCTION OF MEAN-VARIANCE PORTFOLIOS BASED ON FAMMA FRENCH 3 FACTOR MODEL
#=============================================================================================
# Ensure factors data contains columns: Mkt-RF, SMB, HML
#------------ Fitting a Fama-French Three-Factor Model ------------------------------------------------------
#==============================================================================================
# CONSTRUCTION OF MEAN-VARIANCE PORTFOLIOS BASED ON FAMA-FRENCH 3 FACTOR MODEL
#=============================================================================================
# Ensure factors data contains columns: Mkt-RF, SMB, HML
factors_3F <- factors[, c("Mkt-RF", "SMB", "HML")]
# Fit the Fama-French three-factor model for each fund
fit_ff_3F <- lapply(1:ncol(Ret), function(i) {
lm(Ret[, i] ~ factors_3F[1:insample, "Mkt-RF"] + factors_3F[1:insample, "SMB"] + factors_3F[1:insample, "HML"])
})
# Extract the coefficients and residuals
alphas_3F <- sapply(fit_ff_3F, function(x) coef(x)[1])
betas_3F <- t(sapply(fit_ff_3F, function(x) coef(x)[-1]))
residuals_list_3F <- lapply(fit_ff_3F, residuals)
residual_vars_3F <- diag(sapply(residuals_list_3F, var))
# Calculate the mean returns of the factors
mean_factors_return_3F <- colMeans(factors_3F[1:insample, ])
# Ensure mean_factors_return_3F is a column vector
mean_factors_return_3F <- matrix(mean_factors_return_3F, ncol = 1)
# Estimate the mean returns of the funds
m_vec_ff_3F <- alphas_3F + betas_3F %*% mean_factors_return_3F
max(m_vec_ff_3F)
# Estimate the covariance matrix using the factor model
factor_cov_3F <- cov(factors_3F[1:insample, ])
cov_mat_ff_3F <- residual_vars_3F + betas_3F %*% factor_cov_3F %*% t(betas_3F)
# Solve the optimization problem for the Mean-Variance Portfolio
target_return_3F <- 0.007  # or your chosen target return
D.mat_3F <- 2 * cov_mat_ff_3F
d.vec_3F <- rep(0, ncol(Ret))
A.mat_3F <- cbind(rep(1, ncol(Ret)), m_vec_ff_3F, diag(ncol(Ret)))
b.vec_3F <- c(1, target_return_3F, rep(0, ncol(Ret)))
# Solve the Quadratic Programming Problem
qp.Result_meanvar_3F <- solve.QP(Dmat = D.mat_3F, dvec = d.vec_3F, Amat = A.mat_3F, bvec = b.vec_3F, meq = 1)
# Extract optimal weights
w_meanvar_3F <- round(qp.Result_meanvar_3F$solution, 5)
# Calculate in-sample performance
PortReturn_meanvar_3F <- sum(m_vec_ff_3F * w_meanvar_3F)
PortRisk_meanvar_3F <- sqrt(t(w_meanvar_3F) %*% cov_mat_ff_3F %*% w_meanvar_3F)
# Print portfolio return and risk
print(round(cbind(PortReturn_meanvar_3F, PortRisk_meanvar_3F), 4))
#------------------------------- OUT OF SAMPLE -----------------------------------------
# Assume factors_outofsample data contains columns: Mkt-RF, SMB, HML
factors_outofsample_3F <- factors_3F[(insample + 1):T, ]
# Calculate mean returns of factors out-of-sample
mean_factors_return_outofsample_3F <- colMeans(factors_outofsample_3F)
# Ensure mean_factors_return_outofsample_3F is a column vector
mean_factors_return_outofsample_3F <- matrix(mean_factors_return_outofsample_3F, ncol = 1)
# Estimate mean returns of funds out-of-sample
m_vec_ff_outofsample_3F <- alphas_3F + betas_3F %*% mean_factors_return_outofsample_3F
# Realized return of mean-variance portfolio out-of-sample
RR_ff_meanvar_outofsample_3F <- Ret_outofsample %*% w_meanvar_3F
mean(RR_ff_meanvar_outofsample_3F)
# Calculate portfolio risk (standard deviation) out-of-sample
cov_mat_ff_outofsample_3F <- residual_vars_3F + betas_3F %*% cov(factors_outofsample_3F) %*% t(betas_3F)
PR_ff_meanvar_outofsample_3F <- sqrt(t(w_meanvar_3F) %*% cov_mat_ff_outofsample_3F %*% w_meanvar_3F)
# Conditional Sharpe Ratio out-of-sample
CSR_ff_meanvar_outofsample_3F <- mean(RR_ff_meanvar_outofsample_3F) / PR_ff_meanvar_outofsample_3F
# Calculate cumulative returns
Cum_Ret_ff_meanvar_3F <- cumsum(RR_ff_meanvar_outofsample_3F)
#==============================================================================================
# CONSTRUCTION OF MIN-VARIANCE PORTFOLIOS BASED ON FAMA-FRENCH 3 FACTOR MODEL
#=============================================================================================
D.mat_minvar_3F <- 2 * cov_mat_ff_3F
d.vec_minvar_3F <- rep(0, ncol(Ret))
A.mat_minvar_3F <- cbind(rep(1, ncol(Ret)), diag(ncol(Ret)))
b.vec_minvar_3F <- c(1, rep(0, ncol(Ret)))
qp.Result_minvar_3F <- solve.QP(Dmat = D.mat_minvar_3F, dvec = d.vec_minvar_3F, Amat = A.mat_minvar_3F, bvec = b.vec_minvar_3F, meq = 1)
# Extract optimal weights
w_minvar_3F <- round(qp.Result_minvar_3F$solution, 5)
# Calculate in-sample performance for Minimum Variance Portfolio
PortReturn_minvar_3F <- sum(m_vec_ff_3F * w_minvar_3F)
PortRisk_minvar_3F <- sqrt(t(w_minvar_3F) %*% cov_mat_ff_3F %*% w_minvar_3F)
# Print in-sample portfolio return and risk for Minimum Variance Portfolio
print(round(cbind(PortReturn_minvar_3F, PortRisk_minvar_3F), 4))
# ------------------------------ OUT OF SAMPLE -------------------------------------
# Factors out-of-sample data assumed to contain columns: Mkt-RF, SMB, HML
factors_outofsample_3F <- factors_3F[(insample + 1):T, ]
# Calculate mean returns of factors out-of-sample
mean_factors_return_outofsample_3F <- colMeans(factors_outofsample_3F)
# Ensure mean_factors_return_outofsample_3F is a column vector
mean_factors_return_outofsample_3F <- matrix(mean_factors_return_outofsample_3F, ncol = 1)
# Estimate mean returns of funds out-of-sample
m_vec_ff_outofsample_3F <- alphas_3F + betas_3F %*% mean_factors_return_outofsample_3F
# Realized return
RR_ff_minvar_outofsample_3F <- Ret_outofsample %*% w_minvar_3F
mean(RR_ff_minvar_outofsample_3F)
# Calculate portfolio risk (standard deviation) out-of-sample
cov_mat_ff_outofsample_3F <- residual_vars_3F + betas_3F %*% cov(factors_outofsample_3F) %*% t(betas_3F)
PR_ff_minvar_outofsample_3F <- sqrt(t(w_minvar_3F) %*% cov_mat_ff_outofsample_3F %*% w_minvar_3F)
# Conditional Sharpe Ratio out-of-sample
CSR_ff_minvar_outofsample_3F <- mean(RR_ff_minvar_outofsample_3F) / PR_ff_minvar_outofsample_3F
# Calculate cumulative returns for Minimum Variance Portfolio
Cum_Ret_ff_minvar_3F <- cumsum(RR_ff_minvar_outofsample_3F)
# Cumulative Portfolio Returns
plot(dates, Cum_Ret_ff_meanvar_3F, type="l", col="blue", lwd=3, xlab="Time", ylab="Cumulative Return",
main="", cex.axis=1.5, cex.lab=1.5, cex.main=1.5, ylim=c(-0.2, 0.6))
lines(dates, Cum_Ret_ff_minvar_3F, type="l", col="red", lwd=3)
legend("topleft", legend=c("Mean-Variance Portfolio", "Minimum Variance Portfolio"),
col=c("blue", "red"), lty=1, lwd=3, cex=1.5, inset=c(0.01, 0.01))
# Customize the x-axis to show the actual dates by year without duplication
axis.Date(1, at = seq(as.Date("2016-01-01"), as.Date("2019-07-01"), by = "years"), format = "%Y", cex.axis = 1.5)
#==============================================================================================
# CONSTRUCTION OF MEAN-VARIANCE PORTFOLIOS BASED ON FAMA-FRENCH FOUR-FACTOR MODEL
#==============================================================================================
factors <- read_excel(file_path, sheet = "Factors")
factors <- as.data.frame(factors[,-1])
dim(factors)
head(factors)
# Ensure factors data contains columns: Mkt-RF, SMB, HML, MOM (Momentum)
factors_4F <- factors[, c("Mkt-RF", "SMB", "HML", "MOM")]
# Fit the four-factor model for each fund
fit_ff_4F <- lapply(1:ncol(Ret), function(i) {
lm(Ret[, i] ~ factors_4F[1:insample, "Mkt-RF"] + factors_4F[1:insample, "SMB"] + factors_4F[1:insample, "HML"] + factors_4F[1:insample, "MOM"])
})
# Extract the coefficients and residuals
alphas_4F <- sapply(fit_ff_4F, function(x) coef(x)[1])
betas_4F <- t(sapply(fit_ff_4F, function(x) coef(x)[-1]))
residuals_list_4F <- lapply(fit_ff_4F, residuals)
residual_vars_4F <- diag(sapply(residuals_list_4F, var))
# Calculate the mean returns of the factors
mean_factors_return_4F <- colMeans(factors_4F[1:insample, ])
# Ensure mean_factors_return_4F is a column vector
mean_factors_return_4F <- matrix(mean_factors_return_4F, ncol = 1)
# Estimate the mean returns of the funds
m_vec_ff_4F <- alphas_4F + betas_4F %*% mean_factors_return_4F
max(m_vec_ff_4F)
# Estimate the covariance matrix using the factor model
factor_cov_4F <- cov(factors_4F[1:insample, ])
cov_mat_ff_4F <- residual_vars_4F + betas_4F %*% factor_cov_4F %*% t(betas_4F)
# Solve the optimization problem for the Mean-Variance Portfolio
target_return_4F <- 0.009  # or your chosen target return
D.mat_4F <- 2 * cov_mat_ff_4F
d.vec_4F <- rep(0, ncol(Ret))
A.mat_4F <- cbind(rep(1, ncol(Ret)), m_vec_ff_4F, diag(ncol(Ret)))
b.vec_4F <- c(1, target_return_4F, rep(0, ncol(Ret)))
# Solve the Quadratic Programming Problem
qp.Result_meanvar_4F <- solve.QP(Dmat = D.mat_4F, dvec = d.vec_4F, Amat = A.mat_4F, bvec = b.vec_4F, meq = 1)
# Extract optimal weights
w_meanvar_4F <- round(qp.Result_meanvar_4F$solution, 5)
# Calculate in-sample performance
PortReturn_meanvar_4F <- sum(m_vec_ff_4F * w_meanvar_4F)
PortRisk_meanvar_4F <- sqrt(t(w_meanvar_4F) %*% cov_mat_ff_4F %*% w_meanvar_4F)
# Print portfolio return and risk
print(round(cbind(PortReturn_meanvar_4F, PortRisk_meanvar_4F), 4))
#------------------------------- OUT OF SAMPLE -----------------------------------------
# Assume factors_outofsample data contains columns: Mkt-RF, SMB, HML, MOM
factors_outofsample_4F <- factors_4F[(insample + 1):T, ]
# Calculate mean returns of factors out-of-sample
mean_factors_return_outofsample_4F <- colMeans(factors_outofsample_4F)
# Ensure mean_factors_return_outofsample_4F is a column vector
mean_factors_return_outofsample_4F <- matrix(mean_factors_return_outofsample_4F, ncol = 1)
# Estimate mean returns of funds out-of-sample
m_vec_ff_outofsample_4F <- alphas_4F + betas_4F %*% mean_factors_return_outofsample_4F
# Realized return of mean-variance portfolio out-of-sample
RR_ff_meanvar_outofsample_4F <- Ret_outofsample %*% w_meanvar_4F
mean(RR_ff_meanvar_outofsample_4F)
# Calculate portfolio risk (standard deviation) out-of-sample
cov_mat_ff_outofsample_4F <- residual_vars_4F + betas_4F %*% cov(factors_outofsample_4F) %*% t(betas_4F)
PR_ff_meanvar_outofsample_4F <- sqrt(t(w_meanvar_4F) %*% cov_mat_ff_outofsample_4F %*% w_meanvar_4F)
# Conditional Sharpe Ratio out-of-sample
CSR_ff_meanvar_outofsample_4F <- mean(RR_ff_meanvar_outofsample_4F) / PR_ff_meanvar_outofsample_4F
# Calculate cumulative returns
Cum_Ret_ff_meanvar_4F <- cumsum(RR_ff_meanvar_outofsample_4F)
#==============================================================================================
# CONSTRUCTION OF MIN-VARIANCE PORTFOLIOS BASED ON FAMA-FRENCH FOUR-FACTOR MODEL
#==============================================================================================
D.mat_minvar_4F <- 2 * cov_mat_ff_4F
d.vec_minvar_4F <- rep(0, ncol(Ret))
A.mat_minvar_4F <- cbind(rep(1, ncol(Ret)), diag(ncol(Ret)))
b.vec_minvar_4F <- c(1, rep(0, ncol(Ret)))
qp.Result_minvar_4F <- solve.QP(Dmat = D.mat_minvar_4F, dvec = d.vec_minvar_4F, Amat = A.mat_minvar_4F, bvec = b.vec_minvar_4F, meq = 1)
# Extract optimal weights
w_minvar_4F <- round(qp.Result_minvar_4F$solution, 5)
# Calculate in-sample performance for Minimum Variance Portfolio
PortReturn_minvar_4F <- sum(m_vec_ff_4F * w_minvar_4F)
PortRisk_minvar_4F <- sqrt(t(w_minvar_4F) %*% cov_mat_ff_4F %*% w_minvar_4F)
# Print in-sample portfolio return and risk for Minimum Variance Portfolio
print(round(cbind(PortReturn_minvar_4F, PortRisk_minvar_4F), 4))
#------------------------------- OUT OF SAMPLE -------------------------------------
# Factors out-of-sample data assumed to contain columns: Mkt-RF, SMB, HML, MOM
factors_outofsample_4F <- factors_4F[(insample + 1):T, ]
# Calculate mean returns of factors out-of-sample
mean_factors_return_outofsample_4F <- colMeans(factors_outofsample_4F)
# Ensure mean_factors_return_outofsample_4F is a column vector
mean_factors_return_outofsample_4F <- matrix(mean_factors_return_outofsample_4F, ncol = 1)
# Estimate mean returns of funds out-of-sample
m_vec_ff_outofsample_4F <- alphas_4F + betas_4F %*% mean_factors_return_outofsample_4F
# Realized return of minimum-variance portfolio out-of-sample
RR_ff_minvar_outofsample_4F <- Ret_outofsample %*% w_minvar_4F
mean(RR_ff_minvar_outofsample_4F)
# Calculate portfolio risk (standard deviation) out-of-sample
cov_mat_ff_outofsample_4F <- residual_vars_4F + betas_4F %*% cov(factors_outofsample_4F) %*% t(betas_4F)
PR_ff_minvar_outofsample_4F <- sqrt(t(w_minvar_4F) %*% cov_mat_ff_outofsample_4F %*% w_minvar_4F)
# Conditional Sharpe Ratio out-of-sample
CSR_ff_minvar_outofsample_4F <- mean(RR_ff_minvar_outofsample_4F) / PR_ff_minvar_outofsample_4F
# Calculate cumulative returns for Minimum Variance Portfolio
Cum_Ret_ff_minvar_4F <- cumsum(RR_ff_minvar_outofsample_4F)
# Cumulative Portfolio Returns
plot(dates, Cum_Ret_ff_meanvar_4F, type="l", col="blue", lwd=3, xlab="Time", ylab="Cumulative Return",
main="", cex.axis=1.5, cex.lab=1.5, cex.main=1.5, ylim=c(-0.2, 0.6))
lines(dates, Cum_Ret_ff_minvar_4F, type="l", col="red", lwd=3)
legend("topleft", legend=c("Mean-Variance Portfolio", "Minimum Variance Portfolio"),
col=c("blue", "red"), lty=1, lwd=3, cex=1.5, inset=c(0.01, 0.01))
# Customize the x-axis to show the actual dates by year without duplication
axis.Date(1, at = seq(as.Date("2016-01-01"), as.Date("2019-07-01"), by = "years"), format = "%Y", cex.axis = 1.5)
